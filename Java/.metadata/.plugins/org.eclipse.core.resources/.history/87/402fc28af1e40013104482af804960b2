import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
import java.util.TreeMap;


public class Task04 {

	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);
		String[] strArr = input.nextLine().split(" ");
		Map<String, Integer> mapStr = new HashMap<>();
		ValueComparator bvc = new ValueComparator(mapStr);
		TreeMap<String, Integer> sortedMap = new TreeMap<>(bvc);
		
		for (int i = 0; i < strArr.length - 1; i++) {
			String currentString = strArr[i] + " " + strArr[i+1];
			Integer count = mapStr.get(currentString);
			if (count == null) {
				count = 0;
			}
			mapStr.put(currentString, count+1);
			sortedMap.put(currentString, count+1);
		}
		
		//sortedMap.putAll(mapStr);

		for (Map.Entry<String, Integer> strEntry : sortedMap.entrySet()) {
			System.out.printf("%s -> %.2f%%\n", strEntry.getKey(), (double)strEntry.getValue()*100/(strArr.length -1));
		}
		
	}

}
class ValueComparator implements Comparator<String> {

    Map<String, Integer> base;
    public ValueComparator(Map<String, Integer> base) {
        this.base = base;
    }

    // Note: this comparator imposes orderings that are inconsistent with equals.    
    public int compare(String a, String b) {
        if (base.get(a) >= base.get(b)) {
            return -1;
        } else {
            return 1;
        } // returning 0 would merge keys
    }
}
